#!/usr/bin/env node

var cli     = require('commander'),
    request = require('request'),
    fs      = require('fs');

var Options = function() {
    this.host    = 'http://localhost',
    this.port    = 8283,
    this.url     = this.host + ':'+ this.port,
    this.headers = {'content-type' : 'application/json'}

    return this;
};
var opts = new Options();


cli
.version('0.0.1');

function reloadProject(name, inspect, path, cb) {
    if(inspect === undefined) {
        inspect = false;
    }

    if(path) {
    }

    request.post({
        headers  : opts.headers,
        url      : opts.url,
        body     : JSON.stringify({
            "method" : "manager.reloadProject",
            "params" : [name, inspect],
            "id"     : null
        })
    }, function(error, response, body) {
        var result = JSON.parse(body).result;
        cb(result);
    });
}

cli
.command('reload <name>')
.description('\treload a project with a specified name.')
.option('-i, --inspect', 'inspect mode for Weinre inspection.')
.option('-p, --path', 'directory where project resides.')
.action(function(name, options){
    reloadProject(name, options.inspect, options.path, function(result){
        console.log(result);
    });
});

function createProject(name, path, type, cb) {
   if (!name.match(/^[a-zA-Z]/)) {
        console.log("Project name can start only with characters a-z and A-Z");
        return;
    }

    if (!name.match(/^[a-zA-Z0-9_\- ]+$/)) {
        console.log("Project name should be at least 1 character of a-z, A-Z, 0-9, '_', '-' or ' '.");
        return;
    }

    if (!type.match(/^(native|web|n|w)$/)) {
        console.log("Project type can only be 'native' (n) or 'web' (w)");
        return;
    }

    if (type.toLowerCase() === 'n') {
        type = 'native';
    }

    if (type.toLowerCase() === 'w') {
        type = 'web';
    }

    // If path is given, set that directory as current workspace.
    if (path && !fs.existsSync(path)) {
        console.log("Path %s doesn't exist.", path);
        return;
    }

    if (path && fs.existsSync(path)) {
        request.post({
            headers  : opts.headers,
            url      : opts.url,
            body     : JSON.stringify({
                "method" : "manager.changeWorkspacePath",
                "params" : [path],
                "id"     : null
            })
        }, function(error, response, body) {
            console.log('Changed workspace path to %s', path);
        });
    }

    // Create project.
    request.post({
        headers  : opts.headers,
        url      : opts.url,
        body     : JSON.stringify({
            "method" : "manager.createNewProject",
            "params" : [name, type],
            "id"     : null
        })
    }, function(error, response, body) {
        var result = JSON.parse(body).result;
        if (result === null) {
            console.log('Project with this name already exist.');
            return;
        }

        result = 'Project created!';
        result += '\n';
        result += 'Name: ' + name;
        result += '\n';
        result += 'Path: ' + path;
        result += '\n';
        result += 'Type: ' + type;
        cb(result);
    });

}

cli
.command('create <name>')
.description('\tcreate a project with a specified name. Current workspace is assumed as default.')
.option('-p, --path [path]', 'project directory.')
.option('-t, --type [native|web]', 'project type. Web based by default.', 'web')
.action(function(name, options){
    createProject(name, options.path, options.type, function(result){
        console.log(result);
    });
});

function getConnectedClients(cb) {
    request.post({
        headers  : opts.headers,
        url      : opts.url,
        body     : JSON.stringify({
            "method" : "manager.getClientInfo",
            "params" : [],
            "id"     : null
        })
    }, function(error, response, body) {
        var result = JSON.parse(JSON.parse(body).result);
        cb(result);
    });
}

cli
.command('clients')
.description('\tlist connected clients.')
.action(function(){
    getConnectedClients(function(clients){
        if (clients.length === 0) {
            console.log('No clients connected.');
            return;
        }

        clients.forEach(function(client){
            console.log(client.name);
            console.log('\tAddress:\t' + client.address);
            console.log('\tPlatform:\t' + client.platform);
            console.log('\tVersion:\t' + client.version);
        });
    });
});

function getProjectList(cb) {
    request.post({
        headers  : opts.headers,
        url      : opts.url,
        body     : JSON.stringify({
            "method" : "manager.getProjectList",
            "params" : [],
            "id"     : null
        })
    }, function(error, response, body) {
        var result = JSON.parse(body).result,
            out;
        out = 'Name\t\tPath\n';
        result.forEach(function(p){
            out += p.name + '\t' + p.path + '\n';
        });
        cb(out);
    });
}
cli
.command('projects')
.description('\tlist project names in current workspace.')
.action(function(){
    getProjectList(function(result){
        console.log(result);
    });
});
cli.parse(process.argv);
